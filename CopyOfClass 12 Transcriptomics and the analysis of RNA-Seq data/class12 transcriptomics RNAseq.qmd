---rtyuiophuiop
title: "Class 12 Transcriptomics"
author: "Jonathan Cifuentes A17238145"
format: html
---

```{r}
library(BiocManager)
```

```{r}
# For this class, you'll also need DESeq2:
BiocManager::install("DESeq2")
```

Here we will use the DESeq2 package for RNASeq analysis. The data for today 's class come from a study of airway smoothe muscle cells treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatroy effect (himes et al. 2014)

#Import the data

We need two things for this analysis:

-countData (counts for every transcript/gene in each experiment) -colData (metadata that describes the experimental setup)

```{r}
countData<- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
head(countData)
```

```{r}
metadata
```

> Q1. How many genes are in this dataset?

```{r}
nrow(countData)
```

> Q2. How many 'control' cell lines do we have?

```{r}
table(metadata$dex)
```

another way is

```{r}
sum(metadata$dex=="control")
```

-Step1 Calculate the mean of the control smaples (ie columns in countData) Calculate the mean of th etreated samples

(a) We need to find which columns in countDAta are "control" samples.

-   look in the metadata (AKA colData), \$dex column

```{r}
control.inds <- metadata$dex== "control"
```

(b) Extract all the control columns from `countData`and call it `control.counts`

```{r}
control.counts <- countData[ ,control.inds]
```

(c) Caclulate the mean value across the rows for `control.counts` ie calculate the mean count values for each gene in the control samples.

```{r}
control.means <- rowMeans(control.counts)
head(control.means)
```

Step 2 Calculate the mean of the treated samples...

```{r}
treated.inds <- metadata$dex== "treated"
treated.counts <- countData[ ,treated.inds]
treated.means <- rowMeans(treated.counts)
head(treated.means)
```

We now have control and reated mean count values. For ease of book-keeping I will combine these vectors into a new data.frame called `meancounts`

```{r}
meancounts <- data.frame(control.means, treated.means)
head(meancounts)
```

```{r}
plot(meancounts)
```

```{r}
plot(meancounts, log="xy")
```

We use loge transforms for skewed data such as this and because we really care most about relative changes in magnitude.

We most often use log2 as our transform as the math is easier to interpret than log10 or others.

If we have no change- ie same values in control and treated we will have a log2 value of zero

```{r}
log2(20/20)
```

If I have double the amount ie 20 compared to 10

```{r}
log2(20/10)
```

If i have half the amount i will have a log2 fold change of -1

```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

```{r}
meancounts$log2fc<- log2(meancounts$treated.means/meancounts$control.means)
head(meancounts)
```

> Q. How many genes are up regulated at the common trheshold of +2log2fc values?

```{r}
sum(meancounts$log2fc>= 2, na.rm=T)
```

Hold on what about the stat! Yes these are big changes but are these changes significant!! to do this properly we will turn to the DESeq2 package.

## DESeq analysis

```{r}
#| message: false 
library(DESeq2)
```

To use DeSeq we need our input contData and colData ina specific format that DESeq want:

```{r}
dds <- DESeqDataSetFromMatrix(countData=countData, colData = metadata, design = ~dex)
```

To run the analysis I can now use the main DESeq2 function called `DESeq2()` with `dds` as input

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the `results()` function from the package.

```{r}
res <- results(dds)
head(res)
```

Let's make a final (for today) plot of log2 fold change vs the adjusted p-value

```{r}
plot(res$log2FoldChange, res$padj)
```

It is the low p-values that we care about and these are lost in the skewed plot above. Let's take the log of the \$padj values for our plot

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(+2,-2), col="blue")
abline(h=-log(0.05), col="blue") +plot(res$log2FoldChange, res$padj)
```

Finally we can make a color vector to use in the plot to better highlight the genese we care about

```{r}
mycols <- rep("gray", nrow(res))
mycols[abs(res$log2FoldChange)>=2] <- "red"
mycols[res$padj>0.05] <- "gray"

plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=c(+2,-2), col="blue")
abline(h=-log(0.05), col="blue") +plot(res$log2FoldChange, res$padj)
```

Done for today

Still to do: - Add annotation (including gene symbols, entrezid and genename) - Save results as CSV file - Do some pathway analysis (KEGG and GO)

## Adding Annotation Data

We can use the AnnotationDBI package to add annotationd data such as gene identifiers from different sources to our results object.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

We can translate (AKA "map") between all these database id formats:

```{r}
columns(org.Hs.eg.db)
```

```{r}
head(res)
```

My IDs are stored in

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
```

```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="UNIPROT",          # The new format we want to add
                     multiVals="first")
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")
```

## Save our results to date

```{r}
write.csv(res, file="myresults.csv")
```

## Pathway Analysis

We can use the KEGG database of biological pathways to get some more insight into our differentially expressed genes and the kinds of biology they are involved in.

```{r}
library("pathview")
library("gage")
library("gageData")
```

Each element is a character vector of member gene Entrez IDs for a single KEGG pathway.

```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
head(res$entrez)
```

The main gage() function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

Note that we used the mapIDs() function above to obtain Entrez gene IDs (stored in `res$entrez`) and we have the fold change results from DESeq2 analysis (stored in res\$log2FoldChange).

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
#this function adds res$entrez id to the foldchanges
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

Now ican use the KEGG IDs of these pathways from gage to view our genes on these mapped pathways.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![Asthma pathway form KEGG with our genes shown in color](hsa05310.pathview.png)
